<template>
	<view>

		<uni-nav-bar :fixed="true" left-icon="arrowleft"  @clickLeft="back" :title="banner.title" >
			<block slot="right">
				<uni-row class="demo-uni-row" >
					<uni-col :span="12">
						<view v-if="banner.index !== 2" @click="enshrine" >
						    <uni-icons v-if="hasStar"  type="star-filled" size="18" color="#007AFF"></uni-icons>
						    <uni-icons v-else type="star"  size="18" color="#999"></uni-icons>
						</view>
                        <view v-else >
                            <uni-icons type="star" size="18" color="#fff"></uni-icons>
                        </view>
					</uni-col>

					<uni-col :span="12"  style="margin: 0 10rpx;">
						<view @click="refresh">
						<uni-icons type="reload" size="18" color="#999" ></uni-icons>
						</view>
					</uni-col>
				</uni-row>

			</block>

		</uni-nav-bar>

		<scroll-view

		:scroll-top="scrollTop"
		scroll-y="true"
		class="scroll-Y"
		@scrolltoupper="upper"
		@scrolltolower="lower"
		@scroll="scroll">
			<web-view v-if="url" :style="{height: viewHeight}" />

		</scroll-view>





	</view>
</template>

<script>
    import {addRecent, getToken} from '@/common/utils'
    import {linkInfo, switchLink, star, unstar, starStatus, viewPanelLog} from '@/api/panel'
	const DETAIL_PAGE_PATH = '/pages/tabBar/home/detail'

	// import htmlParser from '@/common/html-parser.js'

	function _handleShareChannels(provider) {
		let channels = [];
		for (let i = 0, len = provider.length; i < len; i++) {
			switch (provider[i]) {
				case 'weixin':
					channels.push({
						text: '分享到微信好友',
						id: 'weixin',
						sort: 0
					});
					channels.push({
						text: '分享到微信朋友圈',
						id: 'weixin',
						sort: 1
					});
					break;
				default:
					break;
			}
		}
		channels.sort(function(x, y) {
			return x.sort - y.sort;
		});
		return channels;
	}

	export default {
		data() {
			return {
				title: '',
				banner: {},
				htmlNodes: [],

                url: '',
                hasStar: false,
                refreshCount: 0,
				scrollTop: 0,
				old: {
					scrollTop: 0
				},
				viewHeight: null,
				ktxStatusHeight: null
			}
		},
		onLoad(event) {
			// TODO 后面把参数名替换成 payload
			const payload = event.detailDate || event.payload;
			// 目前在某些平台参数会被主动 decode，暂时这样处理。
			try {
				this.banner = JSON.parse(decodeURIComponent(payload));
                uni.showLoading({
					title: this.$t('commons.loading')
				});
                this.loadLinkUrl()
			} catch (error) {
				this.banner = JSON.parse(payload);
			}
			uni.setNavigationBarTitle({
				title: this.banner.title
			});
            this.addRecent()
            uni.$emit('loadHomeIndex', {
                index: 1
            })
            this.loadStarStatus()
			this.calcViewHeight()


		},
        onBackPress(e) {
            if (!(this.refreshCount > 0)) {
                return false
            }
            this.refreshCount -= 1
            uni.navigateBack()

        },


		methods: {

            addRecent() {
                const item = {id: this.banner.id, title: this.banner.title, index: this.banner.index, userId: this.banner.userId}
                addRecent(item)
            },
            enshrine() {
                const method = this.hasStar ? unstar: star
                method(this.banner.id).then(res => {
                    if(!this.hasStar) {
                        uni.showToast({
                            icon: 'success',
                            title: this.$t('detail.starSuccess')
                        })
                    }
                    this.loadStarStatus()
                    uni.$emit('loadHomeIndex', {
                        index: 0
                    })

                })
            },
            refresh() {
                uni.showLoading({
					title: this.$t('commons.loading')
				});

                this.url = null
                this.loadLinkUrl()
                this.refreshCount += 1
            },
            loadStarStatus() {
                starStatus(this.banner.id).then(res => {
                    this.hasStar = res.data
                })
            },
            loadLinkUrl() {
				const baseUrl = process.env.VUE_APP_BASE_API + 'tempMobileLink/'
				let resource = this.banner.id
				const token = getToken()

				if (this.banner.index && this.banner.index === 2 && this.banner.userId) {
					resource = this.banner.id + '|' + this.banner.userId
                    //this.url = process.env.VUE_APP_BASE_API + 'tempMobileLink/' + this.banner.id + '|' + this.banner.userId + "/" + getToken()
                }

				this.url = baseUrl + encodeURIComponent(encodeURIComponent(resource)) + "/" + encodeURIComponent(token)

                const url = this.url
				/* uni.hideLoading() */
                setTimeout(() => {
                    const iframe = document.getElementsByTagName("iframe")[0]
                    // iframe.style.height = (ktxScreentHeight - ktxStatusHeight) + 'px'
                    iframe.src = url
                    iframe.onload = e => {
                        uni.hideLoading()
                    }
                }, 1000);
								const param = {panelId: this.banner.id, mobile: true}
								viewPanelLog(param).then(res => {
									
								})

            },
			calcViewHeight() {
				let systemInfo = uni.getSystemInfoSync()
				const h5Height = systemInfo.windowHeight - systemInfo.statusBarHeight
				if(systemInfo.navigationBarHeight) {
					h5Height = h5Height - systemInfo.navigationBarHeight
				}
				this.viewHeight = h5Height + 'px'

			},
            back() {
                // #ifdef H5
                let canBack = true
                const pages = getCurrentPages()
                if (pages.length > 1) {
                    uni.navigateBack(1)
                    return;
                }
                let a = this.$router.go(-1)
                // router.go失败之后则重定向到首页
                if (a == undefined) {
                    uni.reLaunch({
                        url: "/pages/index/index"
                    })
                }
                return
                // #endif
                uni.navigateBack(1)
            },
			upper: function(e) {
			},
			lower: function(e) {
			},
			scroll: function(e) {
				this.old.scrollTop = e.detail.scrollTop
			},
			goTop: function(e) {
				this.scrollTop = this.old.scrollTop
				this.$nextTick(() => {
					this.scrollTop = 0
				});
				uni.showToast({
					icon:"none",
					title:"纵向滚动 scrollTop 值已被修改为 0"
				})
			}
		}
	}
</script>

<style>


</style>
